from moviepy.video.io.VideoFileClip import VideoFileClip
from faster_whisper import WhisperModel
import os
import google.generativeai as genai
import whisper
import time
from tqdm import tqdm

# 配置Gemini API
def configure_gemini_api():
    genai.configure(api_key="AIzaSyDXTjBu00nQP0V5B-CTwVzZylDeXQW3VqY")  # 请替换为你的API密钥
    return genai.GenerativeModel('gemini-2.0-flash')

# 使用Gemini翻译文本
def translate_with_gemini(model, text, source_lang="ja", target_lang="zh"):
    prompt = (
        f"请将以下{source_lang}文本翻译为{target_lang}，要求表达要稍微自然、接地气、口语化，但不能过于偏离原本语义，"
        f"并且不要输出任何解释、格式说明或其他无关内容，仅输出翻译结果：\n{text}"
    )
    response = model.generate_content(prompt)
    return response.text.strip()

# 提取音频
def extract_audio(video_path, audio_path="temp_audio.wav"):
    video = VideoFileClip(video_path)
    audio = video.audio
    audio.write_audiofile(audio_path)
    video.close()
    audio.close()

# 使用 faster-whisper 进行转录

def transcribe_with_fast_whisper(audio_path):
    model = WhisperModel("large-v2", device="cuda", compute_type="float32")
    print("🧠 Fast-Whisper 正在语音识别中...")

    segments, _ = model.transcribe(audio_path, beam_size=5, language="ja")

    results = []
    for segment in segments:
        start = segment.start
        end = segment.end
        text = segment.text.strip()
        results.append((start, end, text))

    print(f"✅ 语音识别完成，共 {len(results)} 段")
    return results

# 使用 openai whisper 进行转录
def transcribe_with_whisper(audio_path):
    model = whisper.load_model("large-v3", device="cuda")
    result = model.transcribe(audio_path, beam_size=5, language="ja")

    segments = result["segments"]
    results = []
    print("🧠 Whisper 正在语音识别中...")

    for segment in tqdm(segments, desc="📝 转录进度", ncols=70, bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}%"):
        start = segment["start"]
        end = segment["end"]
        text = segment["text"].strip()
        results.append((start, end, text))

    print(f"✅ 语音识别完成，共 {len(results)} 段")
    return results

# 格式化 ASS 时间
def format_ass_time(seconds):
    h = int(seconds // 3600)
    m = int((seconds % 3600) // 60)
    s = int(seconds % 60)
    cs = int((seconds - int(seconds)) * 100)
    return f"{h}:{m:02d}:{s:02d}.{cs:02d}"

# 生成 ASS 字幕文件
def create_new_ass(segments, translations, output_path):
    header = """[Script Info]
Title: Generated by Whisper with Gemini Translation
ScriptType: v4.00+
Collisions: Normal
PlayResX: 1920
PlayResY: 1080
Timer: 100.0000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,60,&H00FFFFFF,&H000000FF,&H00000000,&H64000000,-1,0,0,0,100,100,0,0,1,2.0,2.0,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
    dialogue_lines = []
    for (start, end, text), translated_text in zip(segments, translations):
        start_ts = format_ass_time(start)
        end_ts = format_ass_time(end)
        original_line = f"Dialogue: 0,{start_ts},{end_ts},Default,,0,0,0,,{text}"
        translated_line = f"Dialogue: 0,{start_ts},{end_ts},Default,,0,0,0,,{translated_text}"
        dialogue_lines.append(original_line)
        dialogue_lines.append(translated_line)

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(header + "\n".join(dialogue_lines))

# 主流程
def main():
    video_path = input("请输入视频文件路径：").strip().strip('"').strip("'")
    if not os.path.exists(video_path):
        print("⚠️ 视频文件不存在")
        return

    audio_path = "temp_audio.wav"
    output_ass_path = os.path.splitext(video_path)[0] + ".ass"

    # 提取音频
    extract_audio(video_path, audio_path)

    # 转录音频
    segments = transcribe_with_fast_whisper(audio_path)

    # 翻译文本
    print("🌍 开始翻译文本...")
    gemini_model = configure_gemini_api()
    translations = []

    with tqdm(total=len(segments), desc="翻译进度", ncols=70, bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}") as pbar:
        for _, _, text in segments:
            translated = translate_with_gemini(gemini_model, text)
            translations.append(translated)
            pbar.update(1)

    # 生成字幕文件
    print("💾 生成字幕文件中...")
    create_new_ass(segments, translations, output_ass_path)
    print("✅ 字幕文件已保存到：", output_ass_path)

    # 清理临时音频
    if os.path.exists(audio_path):
        os.remove(audio_path)

    print("🧹 清理完成！全部任务已完成。")

if __name__ == "__main__":
    main()
